{"version":3,"sources":["lib/ui/View.js","components/PianoKeyboard.js","App.js","index.js"],"names":["View","PureComponent","constructor","props","margin","top","right","bottom","left","rowSpan","columnSpan","canResizeRows","canResizeColumns","super","onResize","increaseRows","this","state","rowlimit","outerHeight","viewSize","newSpan","viewHeight","setState","height","decreaseRows","increaseColumns","columnLimit","outerWidth","viewWidth","width","decreaseColumns","close","toggleView","name","getSizeControlHTML","className","onClick","title","disabled","icon","faArrowsAltV","faLongArrowAltUp","faArrowsAltH","faLongArrowAltLeft","faTimesCircle","resizeComponent","additionalState","ow","oh","PianoKeyboard","componentDidUpdate","render","currentNotes","Piano","pianoPitchRange","get","minPitch","maxPitch","keyWidth","range","filter","d","Midi","isSharp","length","blackKeyWidth","whiteKeys","blackKeys","labels","octaveMarkerPositions","currentX","octave","key","pitch","black","note","getMidiNoteByNr","x","y","w","h","push","color","textColor","borderRadius","has","newKey","rx","ry","fill","stroke","strokeWidth","label","fontSize","style","textAnchor","alignmentBaseline","writingMode","textOrientation","octaveMarkers","octaveMarkerLabels","yPos","i","gridArea","ref","n","svg","transform","App","Component","Math","floor","window","innerWidth","min","innerHeight","getMidiLiveData","midiLiveData","setMidiLiveData","data","addCurrentNote","newMap","Map","set","removeCurrentNote","delete","MidiInputManager","componentDidMount","addEventListener","getChordName","notes","noteLetters","map","getLetter","Chord","detect","s","Array","from","values","sort","a","b","chord2","console","log","getName","join","faInfoCircle","theme","href","faGithub","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5f54075.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAltH, faArrowsAltV, faLongArrowAltLeft, faLongArrowAltUp, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class View extends PureComponent {\r\n\r\n    /**\r\n     * @param {Props} props props\r\n     * @param {Obbject} margin margin\r\n     * @param {number} rowSpan number of rows this view initially has\r\n     * @param {number} colSpan number of columns this view initially has\r\n     * @param {boolean} canResizeRows allow to resize rows?\r\n     * @param {boolean} canResizeColumns allow to resize columns?\r\n     */\r\n    constructor(\r\n        props,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        rowSpan = 1,\r\n        columnSpan = 1,\r\n        canResizeRows = true,\r\n        canResizeColumns = true,\r\n    ) {\r\n        super(props);\r\n        const { outerWidth, outerHeight } = props.viewSize;\r\n        const viewWidth = outerWidth * columnSpan;\r\n        const viewHeight = outerHeight * rowSpan;\r\n        this.state = {\r\n            rowSpan,\r\n            columnSpan,\r\n            canResizeRows,\r\n            canResizeColumns,\r\n            rowlimit: 12,\r\n            columnLimit: 2,\r\n            outerWidth,\r\n            outerHeight,\r\n            viewHeight,\r\n            viewWidth,\r\n            margin,\r\n            width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n            height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Views shoud overwrite this method,\r\n     * to react to resizing.\r\n     * This method is called by resizeComponent (see below).\r\n     */\r\n    onResize = () => { }\r\n\r\n    /**\r\n     * Resizes the component by updating the width and height depending on\r\n     * the received outerWidth and outerHeight props and the internal margin.\r\n     * After updating the state, the callback function will be called.\r\n     * @param {Object} component\r\n     * @param {Function} callback\r\n     * @param {Object} additionalState other properties to set in the state\r\n     */\r\n    resizeComponent(additionalState = {}) {\r\n        const { outerWidth, outerHeight } = this.props.viewSize;\r\n        const { outerWidth: ow, outerHeight: oh, margin, rowSpan, columnSpan } = this.state;\r\n        if (ow !== outerWidth || oh !== outerHeight) {\r\n            const viewWidth = outerWidth * columnSpan;\r\n            const viewHeight = outerHeight * rowSpan;\r\n            this.setState(\r\n                {\r\n                    ...additionalState,\r\n                    outerWidth,\r\n                    outerHeight,\r\n                    viewWidth,\r\n                    viewHeight,\r\n                    width: (outerWidth * columnSpan) - margin.left - margin.right,\r\n                    height: (outerHeight * rowSpan) - margin.top - margin.bottom,\r\n                },\r\n                this.onResize\r\n            );\r\n        }\r\n    }\r\n\r\n    increaseRows = () => {\r\n        const { rowSpan, rowlimit, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan >= rowlimit) { return; }\r\n        const newSpan = rowSpan + 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseRows = () => {\r\n        const { rowSpan, margin, canResizeRows } = this.state;\r\n        const { outerHeight } = this.props.viewSize;\r\n        if (!canResizeRows) { return; }\r\n        if (rowSpan <= 1) { return; }\r\n        const newSpan = rowSpan - 1;\r\n        const viewHeight = outerHeight * newSpan;\r\n        this.setState(\r\n            {\r\n                rowSpan: newSpan,\r\n                viewHeight,\r\n                height: viewHeight - margin.top - margin.bottom\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    increaseColumns = () => {\r\n        const { columnSpan, columnLimit, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan >= columnLimit) { return; }\r\n        const newSpan = columnSpan + 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    decreaseColumns = () => {\r\n        const { columnSpan, margin, canResizeColumns } = this.state;\r\n        const { outerWidth } = this.props.viewSize;\r\n        if (!canResizeColumns) { return; }\r\n        if (columnSpan <= 1) { return; }\r\n        const newSpan = columnSpan - 1;\r\n        const viewWidth = outerWidth * newSpan;\r\n        this.setState(\r\n            {\r\n                columnSpan: newSpan,\r\n                viewWidth,\r\n                width: viewWidth - margin.left - margin.right\r\n            },\r\n            this.onResize\r\n        );\r\n    }\r\n\r\n    close = () => {\r\n        const { toggleView, name } = this.props;\r\n        if (toggleView && name) {\r\n            toggleView(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the HTML (JSX) for the view size control buttons\r\n     */\r\n    getSizeControlHTML = () => (\r\n        <div className='sizeControl'>\r\n            {this.state.canResizeRows && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseRows\r\n                        }\r\n                        title={'Increase rows'}\r\n                        disabled={this.state.rowSpan >= this.state.rowlimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltV} />\r\n                    </button >\r\n                    <button\r\n                        onClick={this.decreaseRows}\r\n                        title={'Decrease rows'}\r\n                        disabled={this.state.rowSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltUp} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            {this.state.canResizeColumns && (\r\n                <span>\r\n                    <button\r\n                        onClick={this.increaseColumns}\r\n                        title={'Increase columns'}\r\n                        disabled={this.state.columnSpan >= this.state.columnLimit}\r\n                    >\r\n                        <FontAwesomeIcon icon={faArrowsAltH} />\r\n                    </button>\r\n                    <button\r\n                        onClick={this.decreaseColumns}\r\n                        title={'Decrease columns'}\r\n                        disabled={this.state.columnSpan <= 1}\r\n                    >\r\n                        <FontAwesomeIcon icon={faLongArrowAltLeft} />\r\n                    </button>\r\n                </span>\r\n            )}\r\n            <button\r\n                onClick={this.close}\r\n                title={'Close'}\r\n            >\r\n                <FontAwesomeIcon icon={faTimesCircle} />\r\n            </button>\r\n        </div >\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { range } from 'd3-array';\r\nimport View from '../lib/ui/View';\r\nimport { Midi, Piano } from 'musicvis-lib';\r\n\r\nexport default class PianoKeyboard extends View {\r\n\r\n    constructor(props) {\r\n        const margin = { top: 20, right: 20, bottom: 40, left: 20 };\r\n        super(props, margin, 1, 1, false, false);\r\n    }\r\n\r\n    componentDidUpdate = () => this.resizeComponent();\r\n\r\n    render() {\r\n        const { rowSpan, columnSpan, viewWidth, viewHeight, width, height, margin } = this.state;\r\n        const { currentNotes } = this.props;\r\n        const { minPitch, maxPitch } = Piano.pianoPitchRange.get(88);\r\n        const whiteNotes = range(minPitch, maxPitch + 1).filter(d => !Midi.isSharp(d));\r\n        // Keys\r\n        const keyWidth = width / whiteNotes.length;\r\n        const blackKeyWidth = keyWidth * 0.9;\r\n        const whiteKeys = [];\r\n        const blackKeys = [];\r\n        const labels = [];\r\n        const octaveMarkerPositions = [];\r\n        let currentX = 0;\r\n        for (let octave = -1; octave < 11; octave++) {\r\n            for (let key = 0; key < 12; key++) {\r\n                const pitch = octave * 12 + key;\r\n                if (pitch < minPitch || pitch > maxPitch) {\r\n                    continue;\r\n                }\r\n                const black = Midi.isSharp(pitch);\r\n                const note = Midi.getMidiNoteByNr(pitch);\r\n                // Position and size\r\n                const x = black ? currentX - (0.5 * blackKeyWidth) : currentX;\r\n                let y = black ? 0 : height * 0.02;\r\n                const w = black ? blackKeyWidth : keyWidth;\r\n                const h = black ? height * 0.6 : height * 0.98;\r\n                if (pitch % 12 === 0) {\r\n                    octaveMarkerPositions.push({ octave, x });\r\n                }\r\n                // Colors\r\n                let color = '#f8f8f8';\r\n                let textColor = '#111';\r\n                let borderRadius = 5;\r\n                if (currentNotes.has(pitch)) {\r\n                    color = 'steelblue';\r\n                } else {\r\n                    color = black ? '#222' : '#f8f8f8';\r\n                    textColor = black ? '#eee' : '#222';\r\n                }\r\n                const newKey = (\r\n                    <rect\r\n                        key={pitch}\r\n                        width={w}\r\n                        height={h}\r\n                        x={x}\r\n                        y={y}\r\n                        rx={borderRadius}\r\n                        ry={borderRadius}\r\n                        fill={color}\r\n                        stroke='#888'\r\n                        strokeWidth='0.5'\r\n                    >\r\n                        <title>\r\n                            {note.label} (MIDI {pitch})\r\n                        </title>\r\n                    </rect>\r\n                );\r\n                labels.push((\r\n                    <text\r\n                        key={pitch}\r\n                        fontSize='10px'\r\n                        style={{\r\n                            fill: textColor,\r\n                            textAnchor: 'middle',\r\n                            alignmentBaseline: 'baseline',\r\n                            writingMode: 'vertical-lr',\r\n                            textOrientation: 'upright'\r\n                        }}\r\n                        x={x + 0.5 * w}\r\n                        y={black ? h - 18 : h - 10}\r\n                    >\r\n                        {note.name}\r\n                    </text>\r\n                ));\r\n                if (black) {\r\n                    blackKeys.push(newKey);\r\n                } else {\r\n                    whiteKeys.push(newKey);\r\n                    currentX += keyWidth;\r\n                }\r\n            }\r\n        }\r\n        // Octave indicators\r\n        const octaveMarkers = [];\r\n        const octaveMarkerLabels = [];\r\n        const yPos = height + 15;\r\n        for (let i = 0; i < octaveMarkerPositions.length - 1; i++) {\r\n            const left = octaveMarkerPositions[i].x + 2;\r\n            const right = octaveMarkerPositions[i + 1].x - 2;\r\n            const d = `\r\n                M ${left} ${yPos - 10}\r\n                L ${left} ${yPos}\r\n                L ${right} ${yPos}\r\n                L ${right} ${yPos - 10}\r\n            `;\r\n            octaveMarkers.push((\r\n                <path\r\n                    key={d}\r\n                    fill='none'\r\n                    stroke='#888'\r\n                    d={d}\r\n                />\r\n            ));\r\n            octaveMarkerLabels.push((\r\n                <text\r\n                    key={d}\r\n                    textAnchor='middle'\r\n                    x={(left + right) / 2}\r\n                    y={yPos + 12}\r\n                >\r\n                    Octave {octaveMarkerPositions[i].octave - 1}\r\n                </text>\r\n            ));\r\n        }\r\n        // HTML\r\n        return (\r\n            <div\r\n                className='View PianoKeyboard'\r\n                style={{ gridArea: `span ${rowSpan} / span ${columnSpan}` }}\r\n            >\r\n                <svg\r\n                    width={viewWidth}\r\n                    height={viewHeight}\r\n                >\r\n                    <g\r\n                        ref={n => this.svg = n}\r\n                        transform={`translate(${margin.left}, ${margin.top})`}\r\n                    >\r\n                        {whiteKeys}\r\n                        {blackKeys}\r\n                        {labels}\r\n                        {octaveMarkers}\r\n                        {octaveMarkerLabels}\r\n                    </g>\r\n                </svg>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style/App.css';\r\n// Views\r\nimport PianoKeyboard from './components/PianoKeyboard';\r\n// API, data etc.\r\nimport { Chord } from \"@tonaljs/tonal\";\r\nimport { MidiInputManager } from 'musicvis-lib';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // Setup MIDI input\r\n        new MidiInputManager(\r\n            this.getMidiLiveData,\r\n            this.setMidiLiveData,\r\n            this.addCurrentNote,\r\n            this.removeCurrentNote\r\n        );\r\n        this.state = {\r\n            viewSize: {\r\n                outerWidth: 800,\r\n                outerHeight: 600\r\n            },\r\n            midiLiveData: [],\r\n            currentNotes: new Map()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Scale layout to current screen size\r\n        window.addEventListener('resize', this.onResize, false);\r\n        this.onResize();\r\n    }\r\n\r\n    /**\r\n     * Updates the size state when the window size changes\r\n     * so views can react and redraw\r\n     */\r\n    onResize = () => {\r\n        const w = Math.floor(window.innerWidth - 10);\r\n        this.setState({\r\n            viewSize: {\r\n                outerWidth: w,\r\n                // outerHeight: Math.floor(window.innerHeight - 100)\r\n                outerHeight: Math.floor(Math.min(w / 4, window.innerHeight - 200))\r\n            }\r\n        });\r\n    }\r\n\r\n    getMidiLiveData = () => this.state.midiLiveData;\r\n\r\n    /**\r\n     * Setter for MIDI input from an instrumetn\r\n     * @param {Note[]} data array with notes\r\n     */\r\n    setMidiLiveData = (data) => {\r\n        // Work-around so note_off event handling can immediately find the note_on event\r\n        // eslint-disable-next-line\r\n        this.state.midiLiveData = data;\r\n        this.setState({ midiLiveData: data });\r\n    };\r\n\r\n    /**\r\n     * Adds a note that is currently played (e.g. keyboard key pressed)\r\n     * @param {Note} note a note\r\n     */\r\n    addCurrentNote = (note) => {\r\n        const newMap = new Map(this.state.currentNotes);\r\n        newMap.set(note.pitch, note);\r\n        this.setState({ currentNotes: newMap });\r\n    }\r\n\r\n    /**\r\n     * Removes a currently played note (e.g. keyboard key no longer pressed)\r\n     * @param {number} pitch pitch of the note to remove\r\n     */\r\n    removeCurrentNote = (pitch) => {\r\n        const newMap = new Map(this.state.currentNotes);\r\n        newMap.delete(pitch);\r\n        this.setState({ currentNotes: newMap });\r\n    }\r\n\r\n    /**\r\n     * https://github.com/tonaljs/tonal/tree/master/packages/chord\r\n     * Detected chords can be used with https://github.com/tonaljs/tonal/tree/master/packages/chord-type\r\n     * @param {Note[]} notes\r\n     * @returns {String[]} possible chord types\r\n     */\r\n    getChordName(notes) {\r\n        const noteLetters = notes.map(d => d.getLetter());\r\n        return Chord.detect(noteLetters);\r\n    }\r\n\r\n    render() {\r\n        const s = this.state;\r\n        const notes = Array.from(s.currentNotes.values())\r\n            .sort((a, b) => a.pitch - b.pitch);\r\n        // const chord = getChordType(notes);\r\n        // console.log(chord);\r\n        const chord2 = this.getChordName(notes);\r\n        console.log(chord2);\r\n        return (\r\n            <div className={`App dark`} >\r\n                <div className='chordInfo'>\r\n                    <div>\r\n                        {Array.from(notes)\r\n                            .map(d => d.getName())\r\n                            .join(' ')}\r\n                    </div>\r\n                    {/* <div>\r\n                        Type: {chord.name}\r\n                    </div> */}\r\n                    <div>\r\n                        Chord name: {chord2.join(', ')}\r\n                    </div>\r\n                </div>\r\n                <div className='explanation'>\r\n                    <span>\r\n                        <FontAwesomeIcon icon={faInfoCircle} />&nbsp;\r\n                        Connect a MIDI device and play some notes to see the chord type.\r\n                    </span>\r\n                </div>\r\n                <PianoKeyboard\r\n                    name='Piano Keyboard'\r\n                    viewSize={s.viewSize}\r\n                    theme='dark'\r\n                    currentNotes={s.currentNotes}\r\n                />\r\n                <div className='githubLink'>\r\n                    <p>\r\n                        <a href='https://github.com/fheyen/midi-chords'>\r\n                            <FontAwesomeIcon icon={faGithub} />&nbsp;\r\n                            https://github.com/fheyen/midi-chords\r\n                        </a>\r\n                    </p>\r\n                    <p>\r\n                        Using&nbsp;\r\n                        <a href='https://github.com/tonaljs/tonal/tree/master/packages/chord-detect'>\r\n                            tonaljs\r\n                        </a>.\r\n                    </p>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}